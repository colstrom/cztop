.output "README.md"
.template 1
# Taxi System

Suppose you're running a taxi company. You have a set of taxi drivers
working for you.  You'd like to connect them to your central server, so they're
ready to get service requests from customers who'd like to get picked up by a
taxi from some place X. As soon as a customer sends his service request, the
central server will send the closest taxi nearby that's available to the
customer.

Of course you want the communication between the broker and the taxi drivers to
be secure, meaning you want encryption and authentication.

You also want ping-pong heartbeating, as you want to have confidence you can
get in touch with your taxi drivers any time you want. And if a service
request can't be delivered to a particular taxi driver, you wanna know
immediately.

This solution is implemented using CLIENT/SERVER sockets and the CURVE
security mechanism.

## Broker

Here's a possible implementation of the broker. What you'll have to provide
are the environment variables `BROKER_ADDRESS` (the public TCP endpoint),
`BROKER_CERT` (path to the broker's secret+public keys), and `CLIENT_CERTS`
(directory to taxi drivers' certificates, public keys only).

After the start, the broker will just start listening for the drivers (CLIENT
sockets) to connect. After a driver has connected, authenticated, and sent its
`HELLO` message, the broker answers with a `WELCOME` or `WELCOMEBACK` message,
depending if the driver was connected before (it might have reconnected and
been assigned a new routing ID).

The broker will present you with a Pry shell. Right before starting the shell,
there's a small usage information, but it's not very well visible due to Pry's
noisy start. It's simple, though. Inside that shell, you can use the method
`#send_command(driver, command)`. Example:

  pry> send_command("driver1", "foobar")

Depending on whether the driver is connected, it'll send the message or report
that it cannot do so.

```ruby
.literal from "broker.rb"
```

## Client

Here you have to provide the environment variables `BROKER_ADDRESS` (ditto),
`BROKER_CERT` (public key only), `CLIENT_CERT` (taxi driver's certificate
containing the secret+public keys).

After connecting to the broker and completing the security handshake, the
client sends a `HELLO` message, after which it immediately expects some answer
from the broker (see below). After that, it just listens for messages (service
requests) and prints them into the terminal.

```ruby
.literal from "client.rb"
```

## How to run the example

### Generate broker's and drivers' keys

Here's a simple script that'll create the broker's certificate and the taxi
drivers' certificates. There are also public key only files so a minimum amount
of information can be made available on one system, e.g. a taxi driver's system
must not know the broker's secret key. Also, the broker doesn't necessarily
need to know the clients' secret keys just to authenticate them.

```ruby
.literal from "generate_keys.rb"

```
Run it as follows:

```
\./generate_keys.rb
```

### Start broker

Run this:

```
\./start_broker.sh
```

which will execute the following script:

```sh
.literal from "start_broker.sh"
```

### Start driver software instances

Run this in another terminal:

```
\./start_clients.sh
```

which will execute the following script:

```sh
.literal from "start_clients.sh"
```

.endtemplate
